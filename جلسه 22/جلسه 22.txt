ساخت کاستوم یوزر:

یک سری از کدها و توضیحات و تغییرات هم داخل خود کد نوشتم.
فایل هایی که میسازیم یا تغییر میدیم:
درون اپ اکانت
admin.py
forms.py
models.py

درون روت اصلی پروژه (یعنی کانفیگ)
settings.py

یه کوتاه توضیح بدم که وقتی مایگریت رو بزنیم و اون 18 تا رو انتقال بدهف، یوزر به دیتابیس وصل میشه و بعدا تغییر دادن یوزر سخت میشه برامون.
به خاطر همین یه دونه CustomUser درست کنیم که بعدا اگه لازم شد تغییر بدیم، این رو تغییر بدیم.
برای این کار بعد از ساخت پروژه، اولین کاری که انجام میدیم، اپ مربوطه رو میسازیم. مثلاً اکانتس
py manage.py startapp accounts
و اضافه کردنش به ستینگز دات پای.
بعد بریم داخل مدلز اپمون و اونجا CustomUser رو درست کنیم و از کلاس AbstractUser ارث بری کنیم.
خود ابسترکت یوزر کجاست؟
from django.contrib.auth.models import AbstractUser 
مرحله بعد میریم داخل settings.py و اونجا این خط رو اضافه میکنیم.
AUTH_USER_MODEL = "accounts.CustomUser"
حالا به جای pass داخل CustomUser مثلا سن رو اضافه کردم.
null و blank رو کامل اینجا توضیح بدم برای بچه ها. که null اگه بذاریم که بشه یعنی میتونه خالی خالی باشه. ولی blank یعنی میتونه با یه چیز خالی
مثلا یه استرینگ خالی پر بشه.
نال مال دیتابیس هست. ولی بلنک برای فرم و ظاهر برنامه مون.
بلنک برای مرحله ولیدیشن هست.
نکته مهم. برای CharField پیشنهاد پایتون اینه که هر دو تا رو True نذاریم. اگه فقط میخوایم که بتونه فرم رو خالی بذاره، بلنک رو فقط ترو بذاریم.
برای بقیه فیلد ها مثلا اینتجر فیلد و اینا مسءله ای نیست. ولی برای کاراکتر فیلد، جفتش رو با هم نذاریم.
چون وقتی تو دیتابیس مینویسه بعدا نمیشه فهمید که چی بوده. فقط بلنک رو ترو بذاریم.
حالا فرم ها رو هم براش درست میکنیم.
یه فایل فرمز دات پای درست کنیم.
داخلش یوزرکریت فرم و یوزرچنج فرم رو کاستوم کنیم مثل فایل.
داخل admin.py هم اون کارها رو بکنیم.
بعدش py manage.py makemigrations accounts بزنیم که فقط همین کلاس های ما رو مایگریت کنه.
بعدش هم مایگریت کنیم.
بعدش یوزر جدید درست کنیم.
در کل خیلی مطالب سخت و حفظی و متفاوتی بود. اگر هم سر کلاس گفته شد، به بچه ها بگم که لزومی نداره حفظ کنن و فقط توضیح بدم براشون این بخش ها رو.
اما لزومی نداره که حفظ بشن اسم اون متغیرها رو. خودم هم حفظ نیستم.
